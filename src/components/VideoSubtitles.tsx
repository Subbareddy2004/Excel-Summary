import React, { useState } from 'react';
import { Upload, Link, Video, Loader2 } from 'lucide-react';
import { useDropzone } from 'react-dropzone';
import toast from 'react-hot-toast';
import { supabase } from '../supabase';

export default function VideoSubtitles() {
  const [videoUrl, setVideoUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [subtitles, setSubtitles] = useState('');

  const onDrop = async (acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      // In production, we would upload this to storage
      toast.success('Video uploaded successfully!');
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'video/*': ['.mp4', '.mov', '.avi', '.mkv']
    },
    multiple: false
  });

  const handleGenerateSubtitles = async () => {
    if (!videoUrl.trim()) {
      toast.error('Please enter a video URL or upload a video');
      return;
    }

    setLoading(true);
    try {
      // Here we would normally call our backend API with OpenAI Whisper
      // For now, we'll just simulate the delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      const subtitlesText = "This is a simulated subtitle. In production, this would be generated by Whisper API.";
      setSubtitles(subtitlesText);
      
      const { data: { session } } = await supabase.auth.getSession();
      
      // Store the result in Supabase
      const { error } = await supabase.from('processing_results').insert({
        type: 'subtitles',
        input_type: 'url',
        original_content: videoUrl,
        processed_content: subtitlesText,
        // Only set user_id if authenticated
        ...(session?.user?.id ? { user_id: session.user.id } : {})
      });

      if (error) throw error;
      toast.success('Subtitles generated successfully!');
    } catch (error) {
      console.error('Supabase request failed', error);
      toast.error('Failed to generate subtitles');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto p-6 space-y-6">
      <div className="flex flex-col space-y-4">
        <div {...getRootProps()} className="border-2 border-dashed border-purple-400 rounded-lg p-8 text-center cursor-pointer hover:border-purple-600 transition-colors">
          <input {...getInputProps()} />
          <Upload className="w-12 h-12 mx-auto mb-4 text-purple-500" />
          {isDragActive ? (
            <p className="text-purple-600">Drop the video here...</p>
          ) : (
            <p className="text-gray-600">Drag & drop a video, or click to select</p>
          )}
        </div>

        <div className="flex flex-col space-y-2">
          <label htmlFor="videoUrl" className="text-sm font-medium text-gray-700">Or paste video URL:</label>
          <div className="flex space-x-2">
            <input
              type="url"
              id="videoUrl"
              value={videoUrl}
              onChange={(e) => setVideoUrl(e.target.value)}
              className="flex-1 p-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
              placeholder="https://example.com/video.mp4"
            />
          </div>
        </div>

        <button
          onClick={handleGenerateSubtitles}
          disabled={loading}
          className="flex items-center justify-center px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors disabled:bg-purple-400"
        >
          {loading ? (
            <>
              <Loader2 className="animate-spin mr-2" />
              Generating Subtitles...
            </>
          ) : (
            <>
              <Video className="mr-2" />
              Generate Subtitles
            </>
          )}
        </button>

        {subtitles && (
          <div className="mt-6 p-6 bg-gray-50 rounded-lg">
            <h3 className="text-lg font-semibold mb-3">Generated Subtitles:</h3>
            <p className="text-gray-700 whitespace-pre-wrap">{subtitles}</p>
          </div>
        )}
      </div>
    </div>
  );
}